{"version":3,"sources":["util.js","components/Player.js","components/Song.js","components/LibrarySong.js","components/Library.js","components/Nav.js","data.js","App.js","reportWebVitals.js","index.js"],"names":["playAudio","isPlaying","audioRef","playPromise","current","play","undefined","then","audio","catch","error","console","log","Player","setIsPlaying","songInfo","setSongInfo","currentSong","songs","setCurrentSong","setSongs","useState","activeVolume","setActiveVolume","activeLibraryHandler","nextPrev","newSongs","map","song","id","active","trackAnim","transform","animationPercentage","getTime","time","Math","floor","slice","skipTrackHandler","direction","a","currentIndex","findIndex","length","className","currentTime","style","background","color","value","type","max","duration","min","onChange","e","target","onClick","size","icon","faAngleLeft","pause","faPause","faPlay","faAngleRight","faVolumeDown","volume","step","Song","src","cover","alt","name","artist","LibrarySong","selectedSong","filter","state","Library","libraryStatus","Nav","setLibraryStatus","faMusic","chillHop","uuidv4","App","useRef","chillhop","timeUpdateHandler","roundedCurrent","round","roundedDuration","percentage","songEndHandler","onLoadedMetadata","onTimeUpdate","ref","onEnded","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a14531fb.chunk.js","sourcesContent":["export const playAudio = (isPlaying, audioRef) => {\r\n      if (isPlaying) {\r\n            const playPromise = audioRef.current.play();\r\n            if (playPromise !== undefined) {\r\n                  playPromise\r\n                        .then((audio) => {\r\n                              audioRef.current.play();\r\n                        })\r\n                        .catch((error) => console.log(error));\r\n            }\r\n      }\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n      faPlay,\r\n      faAngleLeft,\r\n      faAngleRight,\r\n      faPause,\r\n      faVolumeDown,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport { playAudio } from \"../util\";\r\n\r\nconst Player = ({\r\n      isPlaying,\r\n      setIsPlaying,\r\n      audioRef,\r\n      songInfo,\r\n      setSongInfo,\r\n      currentSong,\r\n      songs,\r\n      setCurrentSong,\r\n      setSongs,\r\n}) => {\r\n      const [activeVolume, setActiveVolume] = useState(false);\r\n      //UseEffect Update List\r\n      const activeLibraryHandler = (nextPrev) => {\r\n            const newSongs = songs.map((song) => {\r\n                  if (song.id === nextPrev.id) {\r\n                        return {\r\n                              ...song,\r\n                              active: true,\r\n                        };\r\n                  } else {\r\n                        return {\r\n                              ...song,\r\n                              active: false,\r\n                        };\r\n                  }\r\n            });\r\n\r\n            setSongs(newSongs);\r\n      };\r\n\r\n      const trackAnim = {\r\n            transform: `translateX(${songInfo.animationPercentage}%)`,\r\n      };\r\n      //Event Handlers\r\n      function getTime(time) {\r\n            return (\r\n                  Math.floor(time / 60) +\r\n                  \":\" +\r\n                  (\"0\" + Math.floor(time % 60)).slice(-2)\r\n            );\r\n      }\r\n      const dragHandler = (e) => {\r\n            audioRef.current.currentTime = e.target.value;\r\n            setSongInfo({ ...songInfo, currentTime: e.target.value });\r\n      };\r\n\r\n      const playSongHandler = () => {\r\n            if (isPlaying) {\r\n                  audioRef.current.pause();\r\n                  setIsPlaying(!isPlaying);\r\n            } else {\r\n                  audioRef.current.play();\r\n                  setIsPlaying(!isPlaying);\r\n            }\r\n      };\r\n      const skipTrackHandler = async (direction) => {\r\n            let currentIndex = songs.findIndex(\r\n                  (song) => song.id === currentSong.id\r\n            );\r\n\r\n            //Forward BAck\r\n            if (direction === \"skip-forward\") {\r\n                  await setCurrentSong(\r\n                        songs[(currentIndex + 1) % songs.length]\r\n                  );\r\n                  activeLibraryHandler(\r\n                        songs[(currentIndex + 1) % songs.length]\r\n                  );\r\n            }\r\n            if (direction === \"skip-back\") {\r\n                  if ((currentIndex - 1) % songs.length === -1) {\r\n                        await setCurrentSong(songs[songs.length - 1]);\r\n                        activeLibraryHandler(songs[songs.length - 1]);\r\n                        playAudio(isPlaying, audioRef);\r\n                        return;\r\n                  }\r\n                  await setCurrentSong(\r\n                        songs[(currentIndex - 1) % songs.length]\r\n                  );\r\n                  activeLibraryHandler(\r\n                        songs[(currentIndex - 1) % songs.length]\r\n                  );\r\n            }\r\n            if (isPlaying) audioRef.current.play();\r\n      };\r\n      const changeVolume = (e) => {\r\n            let value = e.target.value;\r\n            audioRef.current.volume = value;\r\n            setSongInfo({ ...songInfo, volume: value });\r\n      };\r\n\r\n      return (\r\n            <div className=\"player\">\r\n                  <div className=\"time-control\">\r\n                        <p>{getTime(songInfo.currentTime)}</p>\r\n                        <div\r\n                              style={{\r\n                                    background: `linear-gradient(to right, ${currentSong.color[0]},${currentSong.color[1]})`,\r\n                              }}\r\n                              className=\"track\"\r\n                        >\r\n                              <input\r\n                                    value={songInfo.currentTime}\r\n                                    type=\"range\"\r\n                                    max={songInfo.duration || 0}\r\n                                    min={0}\r\n                                    onChange={dragHandler}\r\n                              />\r\n                              <div\r\n                                    style={trackAnim}\r\n                                    className=\"animate-track\"\r\n                              ></div>\r\n                        </div>\r\n                        <p>\r\n                              {songInfo.duration\r\n                                    ? getTime(songInfo.duration)\r\n                                    : \"0:00\"}\r\n                        </p>\r\n                  </div>\r\n                  <div className=\"play-control\">\r\n                        <FontAwesomeIcon\r\n                              onClick={() => skipTrackHandler(\"skip-back\")}\r\n                              className=\"skip-back\"\r\n                              size=\"2x\"\r\n                              icon={faAngleLeft}\r\n                        />\r\n                        <FontAwesomeIcon\r\n                              onClick={playSongHandler}\r\n                              className=\"play\"\r\n                              size=\"2x\"\r\n                              icon={isPlaying ? faPause : faPlay}\r\n                        />\r\n                        <FontAwesomeIcon\r\n                              className=\"skip-forward\"\r\n                              size=\"2x\"\r\n                              icon={faAngleRight}\r\n                              onClick={() => skipTrackHandler(\"skip-forward\")}\r\n                        />\r\n                        <FontAwesomeIcon\r\n                              onClick={() => setActiveVolume(!activeVolume)}\r\n                              icon={faVolumeDown}\r\n                        />\r\n                        {activeVolume && (\r\n                              <input\r\n                                    onChange={changeVolume}\r\n                                    value={songInfo.volume}\r\n                                    max=\"1\"\r\n                                    min=\"0\"\r\n                                    step=\"0.01\"\r\n                                    type=\"range\"\r\n                              />\r\n                        )}\r\n                  </div>\r\n            </div>\r\n      );\r\n};\r\n\r\nexport default Player;\r\n","import React from \"react\";\r\n\r\nconst Song = ({ currentSong, isPlaying }) => {\r\n      return (\r\n            <div className=\"song-container\">\r\n                  <img\r\n                        className={isPlaying ? \"rotateSong\" : \"\"}\r\n                        src={currentSong.cover}\r\n                        alt=\"\"\r\n                  />\r\n                  <h2>{currentSong.name}</h2>\r\n                  <h3>{currentSong.artist}</h3>\r\n            </div>\r\n      );\r\n};\r\n\r\nexport default Song;\r\n","import React from \"react\";\r\nimport { playAudio } from \"../util\";\r\n\r\nconst LibrarySong = ({\r\n      name,\r\n      artist,\r\n      cover,\r\n      id,\r\n      setCurrentSong,\r\n      songs,\r\n      audioRef,\r\n      isPlaying,\r\n      setSongs,\r\n      active,\r\n}) => {\r\n      const songSelectHandler = () => {\r\n            const selectedSong = songs.filter((state) => state.id === id);\r\n            setCurrentSong({ ...selectedSong[0] });\r\n            //Set Active in library\r\n            const newSongs = songs.map((song) => {\r\n                  if (song.id === id) {\r\n                        return {\r\n                              ...song,\r\n                              active: true,\r\n                        };\r\n                  } else {\r\n                        return {\r\n                              ...song,\r\n                              active: false,\r\n                        };\r\n                  }\r\n            });\r\n            setSongs(newSongs);\r\n\r\n            //Play audio\r\n            playAudio(isPlaying, audioRef);\r\n      };\r\n      return (\r\n            <div\r\n                  onClick={songSelectHandler}\r\n                  className={`library-song ${active ? \"selected\" : \"\"}`}\r\n            >\r\n                  <img src={cover} alt=\"\" />\r\n                  <div className=\"song-description\">\r\n                        <h3>{name}</h3>\r\n                        <h4>{artist}</h4>\r\n                  </div>\r\n            </div>\r\n      );\r\n};\r\n\r\nexport default LibrarySong;\r\n","import React from \"react\";\r\n\r\nimport LibrarySong from \"./LibrarySong\";\r\n\r\nconst Library = ({\r\n      songs,\r\n      setCurrentSong,\r\n      audioRef,\r\n      isPlaying,\r\n      setSongs,\r\n      libraryStatus,\r\n}) => {\r\n      return (\r\n            <div\r\n                  className={`library ${\r\n                        libraryStatus ? \"active-library\" : \" \"\r\n                  }`}\r\n            >\r\n                  <h2>Library</h2>\r\n                  <div className=\"library-songs\">\r\n                        {songs.map((song) => (\r\n                              <LibrarySong\r\n                                    songs={songs}\r\n                                    cover={song.cover}\r\n                                    name={song.name}\r\n                                    artist={song.artist}\r\n                                    active={song.active}\r\n                                    key={song.id}\r\n                                    id={song.id}\r\n                                    setCurrentSong={setCurrentSong}\r\n                                    audioRef={audioRef}\r\n                                    isPlaying={isPlaying}\r\n                                    setSongs={setSongs}\r\n                              />\r\n                        ))}\r\n                  </div>\r\n            </div>\r\n      );\r\n};\r\n\r\nexport default Library;\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faMusic } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Nav = ({ setLibraryStatus, libraryStatus }) => {\r\n      const openLibraryHandler = () => {\r\n            setLibraryStatus(!libraryStatus);\r\n      };\r\n\r\n      return (\r\n            <nav>\r\n                  <h1>Waves</h1>\r\n                  <button\r\n                        className={libraryStatus ? \"library-active\" : \"\"}\r\n                        onClick={openLibraryHandler}\r\n                  >\r\n                        Library\r\n                        <FontAwesomeIcon icon={faMusic}></FontAwesomeIcon>\r\n                  </button>\r\n            </nav>\r\n      );\r\n};\r\n\r\nexport default Nav;\r\n","import { v4 as uuidv4 } from \"uuid\";\r\nfunction chillHop() {\r\n      return [\r\n            {\r\n                  name: \"Beaver Creek\",\r\n                  cover: \"https://chillhop.com/wp-content/uploads/2020/09/0255e8b8c74c90d4a27c594b3452b2daafae608d-1024x1024.jpg\",\r\n                  artist: \"Aso, Middle School, Aviino\",\r\n                  audio: \"https://mp3.chillhop.com/serve.php/?mp3=10075\",\r\n                  color: [\"#205950\", \"#2ab3bf\"],\r\n                  id: uuidv4(),\r\n                  active: true,\r\n            },\r\n            {\r\n                  name: \"Daylight\",\r\n                  cover: \"https://chillhop.com/wp-content/uploads/2020/07/ef95e219a44869318b7806e9f0f794a1f9c451e4-1024x1024.jpg\",\r\n                  artist: \"Aiguille\",\r\n                  audio: \"https://mp3.chillhop.com/serve.php/?mp3=9272\",\r\n                  color: [\"#EF8EA9\", \"#ab417f\"],\r\n                  id: uuidv4(),\r\n                  active: false,\r\n            },\r\n            {\r\n                  name: \"Keep Going\",\r\n                  cover: \"https://chillhop.com/wp-content/uploads/2020/07/ff35dede32321a8aa0953809812941bcf8a6bd35-1024x1024.jpg\",\r\n                  artist: \"Swørn\",\r\n                  audio: \"https://mp3.chillhop.com/serve.php/?mp3=9222\",\r\n                  color: [\"#CD607D\", \"#c94043\"],\r\n                  id: uuidv4(),\r\n                  active: false,\r\n            },\r\n            {\r\n                  name: \"Nightfall\",\r\n                  cover: \"https://chillhop.com/wp-content/uploads/2020/07/ef95e219a44869318b7806e9f0f794a1f9c451e4-1024x1024.jpg\",\r\n                  artist: \"Aiguille\",\r\n                  audio: \"https://mp3.chillhop.com/serve.php/?mp3=9148\",\r\n                  color: [\"#EF8EA9\", \"#ab417f\"],\r\n                  id: uuidv4(),\r\n                  active: false,\r\n            },\r\n            {\r\n                  name: \"Reflection\",\r\n                  cover: \"https://chillhop.com/wp-content/uploads/2020/07/ff35dede32321a8aa0953809812941bcf8a6bd35-1024x1024.jpg\",\r\n                  artist: \"Swørn\",\r\n                  audio: \"https://mp3.chillhop.com/serve.php/?mp3=9228\",\r\n                  color: [\"#CD607D\", \"#c94043\"],\r\n                  id: uuidv4(),\r\n                  active: false,\r\n            },\r\n            {\r\n                  name: \"Under the City Stars\",\r\n                  cover: \"https://chillhop.com/wp-content/uploads/2020/09/0255e8b8c74c90d4a27c594b3452b2daafae608d-1024x1024.jpg\",\r\n                  artist: \"Aso, Middle School, Aviino\",\r\n                  audio: \"https://mp3.chillhop.com/serve.php/?mp3=10074\",\r\n                  color: [\"#205950\", \"#2ab3bf\"],\r\n                  id: uuidv4(),\r\n                  active: false,\r\n            },\r\n            //ADD MORE HERE\r\n      ];\r\n}\r\n\r\nexport default chillHop;\r\n","import React, { useState, useRef } from \"react\";\nimport \"./styles/app.scss\";\n//Import Components\nimport Player from \"./components/Player\";\nimport Song from \"./components/Song\";\nimport Library from \"./components/Library\";\nimport Nav from \"./components/Nav\";\n//Import data\nimport chillhop from \"./data\";\n//Util\nimport { playAudio } from \"./util\";\n\nfunction App() {\n      //Ref\n      const audioRef = useRef(null);\n\n      const [songs, setSongs] = useState(chillhop());\n      const [currentSong, setCurrentSong] = useState(songs[0]);\n      const [isPlaying, setIsPlaying] = useState(false);\n      const [songInfo, setSongInfo] = useState({\n            currentTime: 0,\n            duration: 0,\n            animationPercentage: 0,\n            volume: 0,\n      });\n      const [libraryStatus, setLibraryStatus] = useState(false);\n\n      const timeUpdateHandler = (e) => {\n            const current = e.target.currentTime;\n            const duration = e.target.duration;\n\n            const roundedCurrent = Math.round(current);\n            const roundedDuration = Math.round(duration);\n            const percentage = Math.round(\n                  (roundedCurrent / roundedDuration) * 100\n            );\n            setSongInfo({\n                  ...songInfo,\n                  currentTime: current,\n                  duration: duration,\n                  animationPercentage: percentage,\n                  volume: e.target.volume,\n            });\n      };\n      const songEndHandler = async () => {\n            let currentIndex = songs.findIndex(\n                  (song) => song.id === currentSong.id\n            );\n            await setCurrentSong(songs[(currentIndex + 1) % songs.length]);\n            playAudio(isPlaying, audioRef);\n            return;\n      };\n      return (\n            <div className={`App ${libraryStatus ? \"library-active\" : \"\"}`}>\n                  <Nav\n                        libraryStatus={libraryStatus}\n                        setLibraryStatus={setLibraryStatus}\n                  />\n                  <Song isPlaying={isPlaying} currentSong={currentSong} />\n                  <Player\n                        audioRef={audioRef}\n                        setIsPlaying={setIsPlaying}\n                        currentSong={currentSong}\n                        isPlaying={isPlaying}\n                        songInfo={songInfo}\n                        setSongInfo={setSongInfo}\n                        songs={songs}\n                        setSongs={setSongs}\n                        setCurrentSong={setCurrentSong}\n                  />\n                  <Library\n                        songs={songs}\n                        setCurrentSong={setCurrentSong}\n                        audioRef={audioRef}\n                        isPlaying={isPlaying}\n                        setSongs={setSongs}\n                        libraryStatus={libraryStatus}\n                  />\n                  <audio\n                        onLoadedMetadata={timeUpdateHandler}\n                        onTimeUpdate={timeUpdateHandler}\n                        ref={audioRef}\n                        src={currentSong.audio}\n                        onEnded={songEndHandler}\n                  ></audio>\n            </div>\n      );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n      <React.StrictMode>\n            <App />\n      </React.StrictMode>,\n      document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}